import json
import uuid
import os
from datetime import datetime, timedelta
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.ext import filters

# ===== –ó–ê–ì–†–£–ó–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –ò–ó .env =====
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMINS = [int(admin_id) for admin_id in os.getenv("ADMINS", "").split(",") if admin_id.strip()]
PHONE_NUMBER = os.getenv("PHONE_NUMBER")
DATA_FILE = os.getenv("DATA_FILE", "users.json")
vpn_link=os.getenv("vpn_link")


# –ü—É—Ç–∏ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
ANDROID_PHOTO_PATH = "android.jpg"  # –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ V2RayTun
WINDOWS_PHOTO_PATH = "windows.png"  # –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ Hiddify
IOS_PHOTO_PATH = "ios.jpg"  # –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ Streisand
MACOS_PHOTO_PATH = "macos.jpg"  # –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ Streisand (—Ç–æ –∂–µ, —á—Ç–æ –∏ –¥–ª—è iOS)

try:
    with open(DATA_FILE, "r") as f:
        users_data = json.load(f)
except FileNotFoundError:
    users_data = {}

def save_data():
    with open(DATA_FILE, "w") as f:
        json.dump(users_data, f, indent=2)

# ===== –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø –° –í–´–ë–û–†–û–ú –£–°–¢–†–û–ô–°–¢–í–ê =====
async def send_device_selection(chat_id: int, context: ContextTypes.DEFAULT_TYPE, text_prefix: str = ""):
    keyboard = [
        [InlineKeyboardButton("Android", callback_data="device_android")],
        [InlineKeyboardButton("Windows", callback_data="device_windows")],
        [InlineKeyboardButton("iOS", callback_data="device_ios")],
        [InlineKeyboardButton("macOS", callback_data="device_macos")]
    ]
    await context.bot.send_message(
        chat_id=chat_id,
        text=f"{text_prefix}–ù–∞ –∫–∞–∫–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å VPN?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if str(user.id) not in users_data:
        users_data[str(user.id)] = {
            "username": user.username,
            "is_paid": False,
            "subscription_end": None,
            "vpn_config_link": None
        }
        save_data()

    keyboard = [
        [InlineKeyboardButton("üÜì –ü—Ä–æ–±–Ω—ã–π (3 –¥–Ω—è, 1‚ÇΩ)", callback_data="plan_trial")],
        [InlineKeyboardButton("üí≥ 30 –¥–Ω–µ–π ‚Äî 250‚ÇΩ", callback_data="plan_30")],
        [InlineKeyboardButton("üí≥ 90 –¥–Ω–µ–π ‚Äî 500‚ÇΩ", callback_data="plan_90")],
        [InlineKeyboardButton("üí≥ 180 –¥–Ω–µ–π ‚Äî 900‚ÇΩ", callback_data="plan_180")],
        [InlineKeyboardButton("üì≤ –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="my_sub")]
    ]
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    user_id = str(user.id)

    if query.data.startswith("plan_"):
        plan = query.data
        price = {"plan_trial": 1, "plan_30": 250, "plan_90": 500, "plan_180": 900}[plan]
        days = {"plan_trial": 3, "plan_30": 30, "plan_90": 90, "plan_180": 180}[plan]
        users_data[user_id]["pending"] = {"days": days, "price": price}
        save_data()

        keyboard = [[InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid_confirm")]]
        await query.edit_message_text(
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ {price}‚ÇΩ –Ω–∞ –Ω–æ–º–µ—Ä: {PHONE_NUMBER}\n"
            "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data == "paid_confirm":
        if "pending" not in users_data[user_id]:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç.")
            return

        plan = users_data[user_id]["pending"]
        text = (
            f"üí∏ –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username} ({user.id})\n"
            f"–¢–∞—Ä–∏—Ñ: {plan['days']} –¥–Ω–µ–π / {plan['price']}‚ÇΩ"
        )
        keyboard = [[InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{user_id}")]]
        for admin_id in ADMINS:
            try:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=text,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            except:
                pass
        await query.edit_message_text("–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif query.data.startswith("approve_"):
        target_user_id = query.data.split("_")[1]
        if query.from_user.id not in ADMINS:
            await query.edit_message_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏.")
            return

        plan = users_data[target_user_id].pop("pending", None)
        if not plan:
            await query.edit_message_text("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞.")
            return

        end_date = (datetime.now() + timedelta(days=plan["days"])).strftime("%Y-%m-%d")

        users_data[target_user_id]["is_paid"] = True
        users_data[target_user_id]["subscription_end"] = end_date
        users_data[target_user_id]["vpn_config_link"] = vpn_link
        save_data()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–µ–∑ vpn_link –∏ —Å—Ä–∞–∑—É —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        text_prefix = (
            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {end_date}.\n\n"
        )
        await send_device_selection(chat_id=int(target_user_id), context=context, text_prefix=text_prefix)
        await query.edit_message_text("–ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚úÖ")

    elif query.data == "my_sub":
        user_info = users_data.get(user_id, {})
        if user_info.get("is_paid"):
            text_prefix = (
                f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {user_info['subscription_end']}\n\n"
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=text_prefix + "–ù–∞ –∫–∞–∫–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å VPN?",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("Android", callback_data="device_android")],
                    [InlineKeyboardButton("Windows", callback_data="device_windows")],
                    [InlineKeyboardButton("iOS", callback_data="device_ios")],
                    [InlineKeyboardButton("macOS", callback_data="device_macos")]
                ])
            )
            # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
            await query.delete_message()
        else:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")

    elif query.data.startswith("device_"):
        device = query.data.split("_")[1]
        app_name = ""
        app_link = ""
        photo_path = ""

        if device == "android":
            app_name = "V2RayTun"
            app_link = "https://play.google.com/store/apps/details?id=com.v2raytun.android"
            photo_path = ANDROID_PHOTO_PATH
        elif device == "windows":
            app_name = "Hiddify"
            app_link = "https://apps.microsoft.com/detail/9pdfnl3qv2s5"
            photo_path = WINDOWS_PHOTO_PATH
        elif device == "ios":
            app_name = "Streisand"
            app_link = "https://apps.apple.com/us/app/streisand/id6450534064"
            photo_path = IOS_PHOTO_PATH
        elif device == "macos":
            app_name = "Streisand"
            app_link = "https://apps.apple.com/us/app/streisand/id6450534064"
            photo_path = MACOS_PHOTO_PATH

        # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ —Ñ–æ—Ç–æ, –≤–∫–ª—é—á–∞—è "–ù–∞–∑–∞–¥"
        keyboard = [
            [InlineKeyboardButton(f"–°–∫–∞—á–∞—Ç—å {app_name}", url=app_link)],
            [InlineKeyboardButton("–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"transfer_{device}")],
            [InlineKeyboardButton("–ü–æ–¥–∫–ª—é—á–∏—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data=f"manual_{device}")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_devices")]
        ]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å caption –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await context.bot.send_photo(
            chat_id=query.message.chat_id,
            photo=open(photo_path, "rb"),
            caption=f"–°–∫–∞—á–∞–π—Ç–µ {app_name}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        await query.delete_message()

    elif query.data == "back_to_devices":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
        await send_device_selection(chat_id=query.message.chat_id, context=context, text_prefix="")
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.delete_message()

    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è "–ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É"
    elif query.data.startswith("transfer_"):
        await query.edit_message_text("–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")

    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è "–ø–æ–¥–∫–ª—é—á–∏—Ç—å –≤—Ä—É—á–Ω—É—é"
    elif query.data.startswith("manual_"):
        user_info = users_data.get(user_id, {})
        vpn_config_link = user_info.get("vpn_config_link")
        if vpn_config_link:
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=f"–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Å—ã–ª–∫—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n`{vpn_config_link}`",
                parse_mode="Markdown"
            )
        else:
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="VPN-—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
            )
        # –ù–µ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥

# ===== –ó–ê–ü–£–°–ö =====
def main():
    app = Application.builder().token(BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()