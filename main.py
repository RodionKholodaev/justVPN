# main.py
import asyncio
import base64
import json
import logging
import os
import uuid
from datetime import datetime, timedelta
from typing import Optional

import aiohttp
from yookassa import Configuration, Payment
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
)

# ----------------- CONFIG -----------------
TELEGRAM_TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"
YOOKASSA_SHOP_ID = "YOUR_SHOP_ID"
YOOKASSA_SECRET_KEY = "YOUR_SECRET_KEY"

# Server where 3x_ui runs (used in generated ss:// links)
SERVER_IP = "91.184.248.35"  # —Ç–≤–æ–π —Å–µ—Ä–≤–µ—Ä IP
SHADOWSOCKS_PORT = 8388     # –ø–æ—Ä—Ç shadowsocks –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–∏–∑–º–µ–Ω–∏—Ç—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
SHADOWSOCKS_METHOD = "chacha20-ietf-poly1305"  # –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤

# Optional: 3x_ui API config (–µ—Å–ª–∏ –ø–æ—è–≤–∏—Ç—Å—è ‚Äî –±–æ—Ç —Å–º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å API –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏)
XUI_API_URL = None  # –ø—Ä–∏–º–µ—Ä: "http://127.0.0.1:54321" –∏–ª–∏ "http://91.184.248.35:54321"
XUI_ADMIN_USER = None
XUI_ADMIN_PASS = None

# Prices (–≤ —Ä—É–±–ª—è—Ö)
PRICES = {
    "trial": 1,     # 3 –¥–Ω—è
    "30": 250,      # 30 –¥–Ω–µ–π
    "90": 500,      # 90 –¥–Ω–µ–π
    "180": 900,     # 180 –¥–Ω–µ–π
}

# Durations (days)
DURATIONS = {
    "trial": 3,
    "30": 30,
    "90": 90,
    "180": 180,
}

# Storage
DATA_FILE = "users_data.json"
POLL_INTERVAL = 4  # seconds between yookassa polling attempts
POLL_TIMEOUT = 5 * 60  # seconds for payment waiting (5 minutes)

# Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# ----------------- STORAGE -----------------
if os.path.exists(DATA_FILE):
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            users_data = json.load(f)
    except Exception as e:
        logger.exception("Failed to load data file, starting with empty store.")
        users_data = {}
else:
    users_data = {}


def save_data():
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(users_data, f, ensure_ascii=False, indent=2)
    except Exception:
        logger.exception("Failed to save data file.")


# ----------------- HELPERS -----------------
def ensure_user_record(user_id: int, username: Optional[str]):
    uid = str(user_id)
    if uid not in users_data:
        users_data[uid] = {
            "username": username or "",
            "is_paid": False,
            "subscription_end": None,
            "trial_used": False,
            "vpn_config_link": None,
        }
        save_data()


def make_ss_link(method: str, password: str, host: str, port: int, name: str) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é ss:// —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    ss://<base64(method:password@host:port)>#name
    """
    raw = f"{method}:{password}@{host}:{port}"
    b64 = base64.urlsafe_b64encode(raw.encode()).decode().rstrip("=")
    return f"ss://{b64}#{name}"


async def create_3x_user_and_get_ss(uid: str, days: int) -> str:
    """
    –ó–∞–≥–ª—É—à–∫–∞: –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å 3x_ui, –º—ã –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ss:// —Å—Å—ã–ª–∫—É,
    –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —ç—Ç–∏–º –ø–∞—Ä–æ–ª–µ–º –∏ –ø–æ—Ä—Ç–æ–º SHADOWSOCKS_PORT.
    –ï—Å–ª–∏ —Ç—ã –¥–æ–±–∞–≤–∏—à—å XUI_API_URL + creds, —Å—é–¥–∞ –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π HTTP-–≤—ã–∑–æ–≤ –∫ 3x_ui –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏.
    """
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∫—Ä–µ–¥—ã ‚Äî –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–¥–µ—Å—å API-–≤—ã–∑–æ–≤ –≤ 3x_ui –∏ –≤–µ—Ä–Ω—É—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–æ–Ω—Ñ–∏–≥.
    if XUI_API_URL and XUI_ADMIN_USER and XUI_ADMIN_PASS:
        # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å 3x_ui API.
        # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø–ª–∞–Ω: –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω/–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é, POST —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/inbound, –ø—Ä–æ—á–∏—Ç–∞—Ç—å credentials –∏ —Å–æ–±—Ä–∞—Ç—å ss:// —Å—Å—ã–ª–∫—É.
        # –°–µ–π—á–∞—Å ‚Äî fallback –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
        pass

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    password = uuid.uuid4().hex[:16]
    name = f"User{uid}"
    ss_link = make_ss_link(SHADOWSOCKS_METHOD, password, SERVER_IP, SHADOWSOCKS_PORT, name)
    # NOTE: —ç—Ç–æ—Ç –ø–∞—Ä–æ–ª—å –Ω—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é/—Å–∫—Ä–∏–ø—Ç–æ–º –¥–æ–±–∞–≤–∏—Ç—å –≤ 3x_ui –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞—Ä–∞–Ω–µ–µ —à–∞–±–ª–æ–Ω,
    # –ª–∏–±–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å 3x_ui API, —á—Ç–æ–±—ã —Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ —Ä–∞–±–æ—á–µ–π.
    return ss_link


def add_subscription(uid: str, days: int):
    user = users_data.get(uid)
    now = datetime.now()
    if user and user.get("subscription_end"):
        try:
            cur_end = datetime.strptime(user["subscription_end"], "%Y-%m-%d")
        except Exception:
            cur_end = now
        if cur_end > now:
            new_end = cur_end + timedelta(days=days)
        else:
            new_end = now + timedelta(days=days)
    else:
        new_end = now + timedelta(days=days)

    users_data[uid]["is_paid"] = True
    users_data[uid]["subscription_end"] = new_end.strftime("%Y-%m-%d")
    save_data()


# ----------------- YOOKASSA -----------------
def yookassa_setup():
    Configuration.account_id = YOOKASSA_SHOP_ID
    Configuration.secret_key = YOOKASSA_SECRET_KEY


def create_payment(user_id: int, amount: int, description: str, metadata: dict):
    """
    –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –∏ –≤–µ—Ä–Ω—É—Ç—å (confirmation_url, payment_id)
    """
    yookassa_setup()
    payload = {
        "amount": {"value": str(amount), "currency": "RUB"},
        "confirmation": {"type": "redirect", "return_url": "https://example.com/return"},
        "capture": True,
        "description": description,
        "metadata": metadata,
    }
    p = Payment.create(payload)
    url = p.confirmation.confirmation_url
    pid = p.id
    return url, pid


def get_payment_status(payment_id: str) -> Optional[str]:
    yookassa_setup()
    p = Payment.find_one(payment_id)
    # Depending on SDK version, accessing status might vary; common attr is 'status'
    return getattr(p, "status", None)


# ----------------- TELEGRAM HANDLERS -----------------
async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    ensure_user_record(user.id, user.username)

    kb = [
        [InlineKeyboardButton("üÜì –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å (3 –¥–Ω—è –∑–∞ 1 ‚ÇΩ)", callback_data="pay_trial")],
        [InlineKeyboardButton("üí≥ 30 –¥–Ω–µ–π ‚Äî 250 ‚ÇΩ", callback_data="pay_30")],
        [InlineKeyboardButton("üí≥ 90 –¥–Ω–µ–π ‚Äî 500 ‚ÇΩ", callback_data="pay_90")],
        [InlineKeyboardButton("üí≥ 180 –¥–Ω–µ–π ‚Äî 900 ‚ÇΩ", callback_data="pay_180")],
        [InlineKeyboardButton("üì≤ –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="status")],
    ]
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –≤—ã–¥–∞–º —Ç–µ–±–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ Hiddify/v2RayTun (Shadowsocks).\n\n"
        "–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ:"
    )
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(kb))


async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    uid = str(user.id)
    ensure_user_record(user.id, user.username)

    if query.data == "status":
        user_rec = users_data.get(uid)
        if user_rec and user_rec.get("is_paid") and user_rec.get("subscription_end"):
            await query.edit_message_text(
                f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {user_rec['subscription_end']}.\n\n"
                f"–°—Å—ã–ª–∫–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞:\n{user_rec.get('vpn_config_link') or '‚Äî'}"
            )
        else:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –≤ –º–µ–Ω—é /start.")
        return

    # –û–ø–ª–∞—Ç—ã
    if query.data == "pay_trial":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å trial
        if users_data[uid].get("trial_used"):
            await query.edit_message_text("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
            return
        amount = PRICES["trial"]
        days = DURATIONS["trial"]
        description = "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ VPN 3 –¥–Ω—è"
        metadata = {"user_id": uid, "tariff": "trial", "days": days}
    elif query.data == "pay_30":
        amount = PRICES["30"]
        days = DURATIONS["30"]
        description = "VPN 30 –¥–Ω–µ–π"
        metadata = {"user_id": uid, "tariff": "30", "days": days}
    elif query.data == "pay_90":
        amount = PRICES["90"]
        days = DURATIONS["90"]
        description = "VPN 90 –¥–Ω–µ–π"
        metadata = {"user_id": uid, "tariff": "90", "days": days}
    elif query.data == "pay_180":
        amount = PRICES["180"]
        days = DURATIONS["180"]
        description = "VPN 180 –¥–Ω–µ–π"
        metadata = {"user_id": uid, "tariff": "180", "days": days}
    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        return

    # –°–æ–∑–¥–∞—ë–º –æ–ø–ª–∞—Ç—É –≤ –ÆKassa
    try:
        confirmation_url, payment_id = await context.application.run_in_executor(
            None, create_payment, int(uid), amount, description, metadata
        )
    except Exception as e:
        logger.exception("create_payment failed")
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º temporary payment info (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å/–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å)
    users_data[uid]["pending_payment"] = {"payment_id": payment_id, "amount": amount, "created_at": datetime.now().isoformat()}
    save_data()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
    await query.edit_message_text(
        f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã ({amount} ‚ÇΩ):\n{confirmation_url}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç –ø–ª–∞—Ç—ë–∂ –∏ –≤—ã–¥–∞—Å—Ç —Å—Å—ã–ª–∫—É."
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é —Ç–∞—Å–∫—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —á–µ–∫–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    asyncio.create_task(payment_watcher(payment_id, uid, days, context))


async def payment_watcher(payment_id: str, uid: str, days: int, context: ContextTypes.DEFAULT_TYPE):
    """
    –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞. –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ: —Å–æ–∑–¥–∞—ë–º SS —Å—Å—ã–ª–∫—É –∏ –ø—Ä–∏—Å—ã–ª–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    logger.info("Start watching payment %s for user %s", payment_id, uid)
    start = datetime.now()
    timeout = timedelta(seconds=POLL_TIMEOUT)

    while datetime.now() - start < timeout:
        await asyncio.sleep(POLL_INTERVAL)
        try:
            status = await context.application.run_in_executor(None, get_payment_status, payment_id)
        except Exception:
            logger.exception("Failed to fetch payment status")
            continue

        logger.info("Payment %s status: %s", payment_id, status)
        if status == "succeeded" or status == "succeeded" or status == "SUCCEEDED":
            # –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞
            # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
            add_subscription(uid, days)
            # –ø—Ä–æ–±–Ω—ã–π —Ñ–ª–∞–≥
            meta = users_data[uid].get("pending_payment", {}).get("metadata", {})
            # –ï—Å–ª–∏ tariff == trial, –æ—Ç–º–µ—á–∞–µ–º trial_used (we already prevent creating trial twice)
            if users_data[uid].get("subscription_end") and "trial" in (users_data[uid].get("pending_payment", {}).get("payment_id", "") or ""):
                pass

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é/–∑–∞–≥–ª—É—à–µ—á–Ω—É—é ss-—Å—Å—ã–ª–∫—É
            try:
                ss_link = await create_3x_user_and_get_ss(uid, days)
            except Exception:
                logger.exception("Failed to create/generate ss link")
                ss_link = await create_3x_user_and_get_ss(uid, days)

            users_data[uid]["vpn_config_link"] = ss_link
            # Mark trial used if this was trial tariff
            pend = users_data[uid].get("pending_payment", {})
            if pend:
                # We stored metadata originally inside yookassa create; but here simpler:
                # if payment created for trial, user likely already had trial condition - mark it:
                # if there is "tariff" in pending metadata we could use it, but we didn't store metadata; for safety:
                # If price is 1 => trial
                if pend.get("amount") == PRICES["trial"]:
                    users_data[uid]["trial_used"] = True

            users_data[uid].pop("pending_payment", None)
            save_data()

            # Send message to user
            try:
                text = (
                    f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {users_data[uid]['subscription_end']}.\n\n"
                    f"–°—Å—ã–ª–∫–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ (Shadowsocks):\n{ss_link}\n\n"
                    "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤ Hiddify –∏–ª–∏ v2RayTun."
                )
                await context.bot.send_message(chat_id=int(uid), text=text)
            except Exception:
                logger.exception("Failed to send success message to user")
            return

        # If payment was canceled or expired - stop
        if status in ("canceled", "expired", "failed"):
            logger.info("Payment %s finished with status %s", payment_id, status)
            try:
                await context.bot.send_message(chat_id=int(uid), text=f"–ü–ª–∞—Ç—ë–∂ –∑–∞–≤–µ—Ä—à—ë–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {status}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            except Exception:
                pass
            users_data[uid].pop("pending_payment", None)
            save_data()
            return

    # timeout
    logger.info("Payment %s timeout", payment_id)
    try:
        await context.bot.send_message(chat_id=int(uid), text="–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂ –∑–∞–Ω–æ–≤–æ.")
    except Exception:
        pass
    users_data[uid].pop("pending_payment", None)
    save_data()


async def info_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    ensure_user_record(user.id, user.username)
    uid = str(user.id)
    rec = users_data[uid]
    if rec["is_paid"] and rec.get("subscription_end"):
        await update.message.reply_text(
            f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {rec['subscription_end']}.\n\n–°—Å—ã–ª–∫–∞:\n{rec.get('vpn_config_link')}"
        )
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –û—Ç–∫—Ä–æ–π—Ç–µ /start —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å.")


# ----------------- MAIN -----------------
def main():
    # Quick validation of config
    missing = []
    if TELEGRAM_TOKEN.startswith("YOUR_"):
        missing.append("TELEGRAM_TOKEN")
    if YOOKASSA_SHOP_ID.startswith("YOUR_") or YOOKASSA_SECRET_KEY.startswith("YOUR_"):
        # Yookassa creds can be filled later (for testing, you can also run without them, but payments won't work)
        logger.warning("YOOKASSA credentials are placeholder. Replace before creating real payments.")

    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start_handler))
    app.add_handler(CallbackQueryHandler(callback_handler))
    app.add_handler(CommandHandler("info", info_cmd))

    logger.info("Starting bot polling...")
    app.run_polling()


if __name__ == "__main__":
    main()
